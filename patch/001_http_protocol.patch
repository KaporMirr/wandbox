diff --git a/cppcms/http_response.h b/cppcms/http_response.h
index 72d4d5a..9648717 100644
--- a/cppcms/http_response.h
+++ b/cppcms/http_response.h
@@ -184,6 +184,10 @@ namespace http {
 		///
 		void retry_after(unsigned);
 		///
+		/// Set Protocol, default protocol is HTTP/1.0
+		///
+		void protocol(int major, int minor);
+		///
 		/// Set GCI Status Header, the message is created according to the code automatically
 		///
 		void status(int code);
diff --git a/src/http_api.cpp b/src/http_api.cpp
index b233f23..82268dd 100644
--- a/src/http_api.cpp
+++ b/src/http_api.cpp
@@ -479,7 +479,7 @@ namespace cgi {
 				}
 				return packet;
 			}
-			packet+= booster::aio::buffer(response_line_);
+			packet+= booster::aio::buffer(response_protocol_);
 			if(!output_body_.empty())
 				packet+= booster::aio::buffer(output_body_);
 			packet+= in;
@@ -507,18 +507,38 @@ namespace cgi {
 							e=booster::system::error_code(errc::protocol_violation,cppcms_category);
 							return true;
 						}
-						if(strcmp(name,"STATUS")==0) {
-							response_line_ = "HTTP/1.0 ";
-							response_line_ +=value;
-							response_line_ +="\r\n";
-							response_line_.append(addon);
+						if(strcmp(name,"PROTOCOL")==0) {
+							response_protocol_ = value;
+						} else if(strcmp(name,"STATUS")==0) {
+							response_status_ = value;
+							if (response_protocol_.empty()) {
+								response_protocol_ = "HTTP/1.0";
+							}
+							if (response_status_.empty()) {
+								response_protocol_ += " 200 OK";
+							} else {
+								response_protocol_ += " ";
+								response_protocol_ += response_status_;
+							}
+							response_protocol_ += "\r\n";
+							response_protocol_.append(addon);
 							return true;
 						}
 					}
 					break;
 				case parser::end_of_headers:
-					response_line_ = "HTTP/1.0 200 Ok\r\n";
-					response_line_.append(addon);
+					if (response_protocol_.empty()) {
+						response_protocol_ = "HTTP/1.0";
+					}
+					if (response_status_.empty()) {
+						response_protocol_ += " 200 OK";
+					} else {
+						response_protocol_ += " ";
+						response_protocol_ += response_status_;
+					}
+					response_protocol_ += "\r\n";
+
+					response_protocol_.append(addon);
 					return true;
 
 				case parser::error_observerd:
@@ -675,7 +695,8 @@ namespace cgi {
 		::cppcms::http::impl::parser output_parser_;
 
 
-		std::string response_line_;
+		std::string response_protocol_;
+		std::string response_status_;
 		char *request_method_;
 		char *request_uri_;
 		bool headers_done_;
diff --git a/src/http_response.cpp b/src/http_response.cpp
index f4d6a2b..97fdc01 100644
--- a/src/http_response.cpp
+++ b/src/http_response.cpp
@@ -687,11 +687,17 @@ void response::write_http_headers(std::ostream &out)
 	_data::headers_type::const_iterator p = d->headers.end();
 
 	if(context_.service().cached_settings().service.generate_http_headers) {
+		p=d->headers.find("Protocol");
+		if(p == d->headers.end())
+			out << "HTTP/1.0 ";
+		else
+			out << p->second << " ";
+
 		p=d->headers.find("Status");
 		if(p == d->headers.end())
-			out << "HTTP/1.0 200 Ok\r\n";
+			out << "200 Ok\r\n";
 		else
-			out << "HTTP/1.0 " << p->second <<"\r\n";
+			out << p->second <<"\r\n";
 	}
 	
 	for(_data::headers_type::const_iterator h=d->headers.begin();h!=d->headers.end();++h) {
@@ -892,6 +898,7 @@ void response::pragma(std::string const &s) { set_header("Pragma",s); }
 void response::proxy_authenticate(std::string const &s) { set_header("Proxy-Authenticate",s); }
 void response::retry_after(unsigned n) { set_header("Retry-After",itoa(n)); }
 void response::retry_after(std::string const &s) { set_header("Retry-After",s); }
+void response::protocol(int major, int minor) { set_header("Protocol","HTTP/"+itoa(major)+"."+itoa(minor)); }
 void response::status(int code)
 {
 	status(code,status_to_string(code));
